#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# # 基本设置与颜色
# -----------------------------------------------------------------------------

# ！！！重要！！！ 开启 24-bit 真彩色支持。
# 下面的配置是为了让 tmux 能正确显示丰富的色彩，尤其是在使用 Neovim 等现代化工具时。
# set -g default-terminal screen-256color # 这是一个备用选项，通常下面的 "tmux-256color" 更好
# 设置 tmux 内部的终端类型，告知其支持 256 色

# 在macos 下面开启 这个配置, 会导致退格键失效
# set  -g default-terminal "tmux-256color"
# 这是开启 24-bit 真彩色的关键。它通过终端覆盖（terminal-overrides）为 xterm-256color 添加了 RGB 能力。
# set -ag terminal-overrides ",xterm-256color:RGB"

# 这个配置是为了兼容某些终端，确保 tmux 能正确处理终端的颜色。
# 在mac os 下表现正常,且退格键正常
set-option -ga terminal-overrides ",xterm-256color:Tc"
# 将 Esc 键的响应延迟设为 0，极大提升在 Vim/Neovim 中按下 Esc 后的响应速度。
set -sg escape-time 0


# 这个配置是为了修复在 MobaXterm 中使用 tmux 时鼠标滚动的问题。
# FIX: Mouse scrolling in MobaXterm tmux: https://superuser.com/a/1627627
set -g terminal-overrides 'xterm*:smcup@:rmcup@'


# 强制 tmux 将退格键(backspace)信号识别为现代标准的 C-? (ASCII DEL)
# 这会覆盖 tmux 基于旧 terminfo 数据库可能做出的错误判断
# set-option -g backspace C-?

# 确保 C-? 信号能被正确地传递到 tmux 内的应用程序（如 vim, shell等）
# -n 表示这个绑定不需要按前缀键
# bind-key -n C-? send-keys C-?


# -----------------------------------------------------------------------------
# # 前缀键 (Prefix Key)
# -----------------------------------------------------------------------------

# tmux 的所有快捷键都需要先按下一个前缀键，默认为 Ctrl-b
# 以下配置可以将前缀键修改为 Ctrl-s。由于它们被注释了，所以当前前缀键仍然是默认的 Ctrl-b。
# unbind C-b
# set-option -g prefix C-s
# bind-key C-s send-prefix


# -----------------------------------------------------------------------------
# # 鼠标与复制模式
# -----------------------------------------------------------------------------

# 开启鼠标支持 (tmux 2.1及以上版本)。
# 允许使用鼠标点击选择面板/窗口、拖动调整面板大小、滚轮滚动等。
set -g mouse on

# 设置复制模式（copy-mode）的快捷键为 vi 模式。
# 进入复制模式后，可以使用 h/j/k/l 移动，v 选择，y 复制等 Vim 风格的操作。
setw -g mode-keys vi

# 禁止 tmux 自动重命名窗口。
# 默认情况下 tmux 会根据当前运行的程序自动修改窗口名，关闭此功能可以保持自定义的窗口名。
set-option -g allow-rename off


# -----------------------------------------------------------------------------
# # 状态栏 (Status Bar)
# -----------------------------------------------------------------------------

## 颜色配置
# 设置状态栏背景为终端默认颜色（实现透明效果）
set-option -g status-bg default
# 设置状态栏前景（文字）颜色为灰色 (colour240)
set-option -g status-fg colour240

## 状态栏开关
# 绑定 `前缀 + Ctrl-s` 来切换状态栏的显示与隐藏
bind C-s set-option -g status

## 状态栏内容显示
# 设置状态栏左侧内容的最大长度
set -g status-left-length 85
# 设置状态栏左侧内容：显示会话名称 (#S)，并设为紫色
set -g status-left "#[fg=colour135] #S"
# 设置非活动窗口的显示格式：索引(#I):名称(#W) 标志(#F)
set -g window-status-format "#[fg=#d75f5f bg=default]#I:#W #F#[fg=#3a3a3a bg=default]│"
# 设置当前活动窗口的显示格式：使用不同颜色（金黄色）高亮
set -g window-status-current-format "#[fg=#a88202 bg=default]#I:#W #F#[fg=#3a3a3a bg=default]│"
# 状态栏本身的样式（背景设为默认）
set -g status-style bg=default
# 设置状态栏右侧内容：用洋红色显示12小时制时间
set -g status-right "#[fg=magenta] #[bg=default] %l:%M"
# 状态栏中的窗口列表居中显示
set -g status-justify centre
# set -g status-right '#(gitmux "#{pane_current_path}")' # 这是一个使用 gitmux 插件在右侧显示 Git 信息的示例，已注释


# -----------------------------------------------------------------------------
# # 快捷键绑定 (Key Bindings)
# -----------------------------------------------------------------------------

## 面板导航 (Vim 风格)
# 使用 h/j/k/l 在左/下/上/右的面板间切换
bind-key h   select-pane -L
bind-key C-h select-pane -L
bind-key j   select-pane -D
bind-key C-j select-pane -D
bind-key k   select-pane -U
bind-key C-k select-pane -U
bind-key l   select-pane -R
bind-key C-l select-pane -R

## 面板位置交换
# `前缀 + Ctrl-u` 将当前面板与上一个面板交换位置
bind -r ^u swapp -U # swapp 是一个脚本或别名，通常用于交换面板
# `前缀 + Ctrl-d` 将当前面板与下一个面板交换位置
bind -r ^d swapp -D # -r (repeat) 标志允许在按下前缀后连续多次触发

## 窗口位置移动
# `前缀 + <` 将当前窗口向左移动
bind-key -r "<" swap-window -d -t -1
# `前缀 + >` 将当前窗口向右移动
bind-key -r ">" swap-window -d -t +1

## 面板大小调整 (Vim 风格)
# 使用 H/J/K/L (大写) 向左/下/上/右调整面板大小，每次5个单元格
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

## 面板分割
# `-c "#{pane_current_path}"` 参数非常有用，它让新分割出的面板在当前目录下打开
# 使用 | 分割为左右两个面板 (水平分割)
bind-key "|" split-window -h -c "#{pane_current_path}"
# 使用 \ 分割出一个占满全屏高度的新面板
bind-key "\\" split-window -fh -c "#{pane_current_path}"
# 使用 - 分割为上下两个面板 (垂直分割)
bind-key "-" split-window -v -c "#{pane_current_path}"
# 使用 _ 分割出一个占满全屏宽度的新面板
bind-key "_" split-window -fv -c "#{pane_current_path}"
# 这两个是 tmux 的默认分割键，这里也覆写以保持新面板在当前目录打开
bind-key "%" split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"

## 会话与窗口管理
# `前缀 + Ctrl-x` 关闭整个会话，并在执行前弹出确认提示，防止误操作
bind-key C-x confirm-before -p "kill-session #W? (y/n)" kill-session

# 重写默认的 `c` 键，让新建窗口也在当前目录下打开
bind-key "c" new-window -c "#{pane_current_path}"

# -----------------------------------------------------------------------------
# # 系统剪贴板集成 (Clipboard Integration)
# -----------------------------------------------------------------------------

# 以下绑定适用于 X Window System (Linux桌面环境)，需要安装 `xsel` 工具。
# 它将 tmux 的复制缓冲区与系统剪贴板连接起来。
# 鼠标双击选中单词并复制到系统主剪贴板 (primary selection)
bind -T copy-mode   DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
# 鼠标三击选中整行并复制到系统主剪贴板
bind -T copy-mode   TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
# 鼠标中键点击，将系统主剪贴板的内容粘贴到 tmux
bind -n MouseDown2Pane run "tmux set-buffer -b primary_selection \"$(xsel -o)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"

# 绑定 `Ctrl-c` 为复制到系统剪贴板 (clipboard)，这是我们通常使用 `Ctrl+C`/`Ctrl+V` 的那个
bind -T copy-mode   C-c send -X copy-pipe-no-clear "xsel -i --clipboard"
bind -T copy-mode-vi C-c send -X copy-pipe-no-clear "xsel -i --clipboard"


# -----------------------------------------------------------------------------
# # 插件管理 (TPM: Tmux Plugin Manager)
# -----------------------------------------------------------------------------

# 我的插件列表
# TPM 插件管理器本身
set -g @plugin 'tmux-plugins/tpm'
# 一套合理的 tmux 默认配置集合
set -g @plugin 'tmux-plugins/tmux-sensible'
# 增强 tmux 复制到系统剪贴板的功能，与上面的手动配置互补
set -g @plugin 'tmux-plugins/tmux-yank'

# 为 tmux-yank 插件设置选项
set -g @yank_action 'copy-pipe-no-clear'

# 之前可能使用的插件，已注释
# set -g @plugin 'wfxr/tmux-power'
# set -g @tmux_power_theme 'sky'

# 初始化 TMUX 插件管理器
# !!! 这一行必须永远在 `tmux.conf` 文件的最底部 !!!
# 安装新插件: 在 tmux 中按下 `前缀 + I` (大写I)
run '~/.tmux/plugins/tpm/tpm'